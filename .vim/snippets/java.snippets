snippet main
	public static void main (String [] args)
	{
		${1:/* code */}
	}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet sif
	if (${1}) {
	    ${2}
	}
snippet sel
	else {
	    ${1}
	}
snippet sw
	while (${1}) {
	    ${2}
	}
snippet sdw
	do {
	    ${2://content}
	} while (${1:condition});
snippet sfr
	for (${1}; ${2}; ${3}) {
	    ${4}
	}
snippet sit
	for (${1} : ${2}) {
	    ${3}
	}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet fun
	${1:public} ${2:void} ${3:method}(${4}) {
	    ${5}
	}
snippet test
	@Test
	public void test${1:Name}() {
	    ${2://body}
	}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet debug
	LOG.debug("${1:func_name}", ${2});
snippet error
	LOG.error("${1:func_name}", ${2});
snippet warn
	LOG.warn("${1:func_name}", ${2});
snippet info
	LOG.info("${1:func_name}", ${2});
snippet log
	${1:private} static final QHLogger LOG = QHLogger.getLogger(${2:class_name}.class);
snippet lv
	"$1", ${1:var_name}${2}
snippet prvsf
	private static final 
snippet prvsfs
	private static final String 
snippet prtsf
	protected static final 
snippet prtsfs
	protected static final String 
snippet pubsfi
	public static final int 
snippet pubsf
	public static final 
snippet pubsfs
	public static final String 
snippet fs
	final String 
snippet rn
	return null;
