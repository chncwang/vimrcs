#states
snippet sfr
	for ${1:i} = ${2} do
	    ${3:--text}
	end${4}
snippet swhl
	while ${1:condition} do
	    ${2:--text}
	end${3}
snippet sit
	for ${1:i} in ${2:elements} do
	    ${3:--text}
	end${4}
snippet srpt
	repeat
	    ${2:--text}
	until ${1:stop condition}
snippet sif
	if ${1:condition} then
	    ${2:--text}
	end${3}
snippet sels
	else
	    ${1:--text}
snippet seif
	elseif ${1:condition} then
	    ${2:--text}
# function
snippet fun
	function ${1:function name}(${2})
	    ${3:--text}
	end
snippet rfun
	function(${1})
	    ${2:--text}
	end${3}
#table
snippet tb
	{${1}}${2}
snippet mt
	setmetatable(${1}, ${2:meta})${3}
#head
snippet mddef
	_G.package.loaded.${1:module name} = _ENV${2}
snippet mdget
	${1:var} = require"${2:module name}"${3}
#io
snippet prs
	print"${1}"${2}
snippet pr
	print(${1})${2}
snippet frt
	${1:io.write}("${2:Hello world!}"${3:, })${4}
#class
snippet cl
	${1:class_name} = {}


	function $1:new(${2})
	    local o = {}
	    setmetatable(o, self)
	    self.__index = self

	    ${3:--text}

	    return o
	end
snippet cls
	${1:class_name} = {}

	local shared_instance = nil


	function $1:new()
	    local o = {}
	    setmetatable(o, self)
	    self.__index = self

	    ${2:--text}

	    return o
	end


	function $1:instance()
	    if shared_instance == nil then
	        shared_instance = $1:new()
	    end

	    return shared_instance
	end
	${3}
